// Generated by data binding compiler. Do not edit!
package com.findajob.jobamax.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.findajob.jobamax.R;
import com.findajob.jobamax.data.pojo.UpcomingEvents;
import com.google.android.material.textview.MaterialTextView;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ItemUpcomingEventsBinding extends ViewDataBinding {
  @NonNull
  public final AppCompatImageView itemUpcomingEventsIvThumbnail;

  @NonNull
  public final MaterialTextView itemUpcomingEventsTvDescription;

  @NonNull
  public final MaterialTextView itemUpcomingEventsTvName;

  @Bindable
  protected UpcomingEvents mItem;

  protected ItemUpcomingEventsBinding(Object _bindingComponent, View _root, int _localFieldCount,
      AppCompatImageView itemUpcomingEventsIvThumbnail,
      MaterialTextView itemUpcomingEventsTvDescription, MaterialTextView itemUpcomingEventsTvName) {
    super(_bindingComponent, _root, _localFieldCount);
    this.itemUpcomingEventsIvThumbnail = itemUpcomingEventsIvThumbnail;
    this.itemUpcomingEventsTvDescription = itemUpcomingEventsTvDescription;
    this.itemUpcomingEventsTvName = itemUpcomingEventsTvName;
  }

  public abstract void setItem(@Nullable UpcomingEvents item);

  @Nullable
  public UpcomingEvents getItem() {
    return mItem;
  }

  @NonNull
  public static ItemUpcomingEventsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_upcoming_events, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ItemUpcomingEventsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ItemUpcomingEventsBinding>inflateInternal(inflater, R.layout.item_upcoming_events, root, attachToRoot, component);
  }

  @NonNull
  public static ItemUpcomingEventsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_upcoming_events, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ItemUpcomingEventsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ItemUpcomingEventsBinding>inflateInternal(inflater, R.layout.item_upcoming_events, null, false, component);
  }

  public static ItemUpcomingEventsBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ItemUpcomingEventsBinding bind(@NonNull View view, @Nullable Object component) {
    return (ItemUpcomingEventsBinding)bind(component, view, R.layout.item_upcoming_events);
  }
}
